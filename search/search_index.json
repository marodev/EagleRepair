{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home EagleRepair is a cross-platform command line tool for automatically fixing static analysis warnigns in C# programs. Documentation : https://marodev.github.io/EagleRepair Install Prerequisites Install .NET 5.0 or later Command line tool EagleRepair is available on NuGet and can be installed as a global tool: dotnet tool install --global EagleRepair.Cli","title":"Home"},{"location":"#home","text":"EagleRepair is a cross-platform command line tool for automatically fixing static analysis warnigns in C# programs. Documentation : https://marodev.github.io/EagleRepair","title":"Home"},{"location":"#install","text":"","title":"Install"},{"location":"#prerequisites","text":"Install .NET 5.0 or later","title":"Prerequisites"},{"location":"#command-line-tool","text":"EagleRepair is available on NuGet and can be installed as a global tool: dotnet tool install --global EagleRepair.Cli","title":"Command line tool"},{"location":"contributing/","text":"Contributing PR's are welcome! Start here: CONTRIBUTING.md","title":"Contributing"},{"location":"contributing/#contributing","text":"PR's are welcome! Start here: CONTRIBUTING.md","title":"Contributing"},{"location":"examples/","text":"Examples Coming soon! R1 Non-Compliant using System ; namespace N { public class C : IDisposable { public void Dispose () { // cleanup } } } Compliant using System ; namespace N { public class C : IDisposable { // To detect redundant calls private bool _disposed = false ; public void Dispose () { Dispose ( true ); GC . SuppressFinalize ( this ); } protected virtual void Dispose ( bool disposing ) { if ( _disposed ) { return ; } if ( disposing ) { // cleanup } _disposed = true ; } } } R2 Non-Compliant public void M ( B b ) { if ( b == null || b . Parent is null ) { // do something } } Compliant public void M ( B b ) { if ( b ?. Parent is null ) { // do something } }","title":"Examples"},{"location":"examples/#examples","text":"Coming soon! R1 Non-Compliant using System ; namespace N { public class C : IDisposable { public void Dispose () { // cleanup } } } Compliant using System ; namespace N { public class C : IDisposable { // To detect redundant calls private bool _disposed = false ; public void Dispose () { Dispose ( true ); GC . SuppressFinalize ( this ); } protected virtual void Dispose ( bool disposing ) { if ( _disposed ) { return ; } if ( disposing ) { // cleanup } _disposed = true ; } } } R2 Non-Compliant public void M ( B b ) { if ( b == null || b . Parent is null ) { // do something } } Compliant public void M ( B b ) { if ( b ?. Parent is null ) { // do something } }","title":"Examples"},{"location":"rules/","text":"Rules EagleRepair currently aims to fix static analysis violations reported by SonarQube and ReSharper. SonarQube ID Squid SonarQube Description R1 3881 \"IDisposable\" should be implemented correctly R3 4201 Null checks should not be used with \"is\" R4 2971 \"IEnumerable\" LINQs should be simplified R5 3247 Duplicate casts should not be made R6 1155 \"Any()\" should be used to test for emptiness R10 3256 \"string.IsNullOrEmpty\" should be used ReSharper ID TypeId ReSharper Description R2 MergeSequentialChecks Merge sequential checks in && or || expressions R3 MergeSequentialChecks Merge sequential checks in && or || expressions R4 ReplaceWithSingleCallTo Any, Count, FirstOrDefault, SingleOrDefault, First, Single, Last R5 MergeCastWithTypeCheck Type check and casts can be merged R6 UseMethodAny Use \".Any()\" to test whether this IEnumerable is empty or not R7 UseNullPropagation Replace if statement with null-propagating code R8 UsePatternMatching Convert \"as\" expression type check and the following null check into pattern matching R9 UseStringInterpolation Use string interpolation expression R10 ReplaceWithStringIsNullOrEmpty Use \"String.IsNullOrEmpty\"","title":"Rules"},{"location":"rules/#rules","text":"EagleRepair currently aims to fix static analysis violations reported by SonarQube and ReSharper.","title":"Rules"},{"location":"rules/#sonarqube","text":"ID Squid SonarQube Description R1 3881 \"IDisposable\" should be implemented correctly R3 4201 Null checks should not be used with \"is\" R4 2971 \"IEnumerable\" LINQs should be simplified R5 3247 Duplicate casts should not be made R6 1155 \"Any()\" should be used to test for emptiness R10 3256 \"string.IsNullOrEmpty\" should be used","title":"SonarQube"},{"location":"rules/#resharper","text":"ID TypeId ReSharper Description R2 MergeSequentialChecks Merge sequential checks in && or || expressions R3 MergeSequentialChecks Merge sequential checks in && or || expressions R4 ReplaceWithSingleCallTo Any, Count, FirstOrDefault, SingleOrDefault, First, Single, Last R5 MergeCastWithTypeCheck Type check and casts can be merged R6 UseMethodAny Use \".Any()\" to test whether this IEnumerable is empty or not R7 UseNullPropagation Replace if statement with null-propagating code R8 UsePatternMatching Convert \"as\" expression type check and the following null check into pattern matching R9 UseStringInterpolation Use string interpolation expression R10 ReplaceWithStringIsNullOrEmpty Use \"String.IsNullOrEmpty\"","title":"ReSharper"}]}